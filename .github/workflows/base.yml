name: Node.js CI

on:
  push:
    branches: [master]
    tags: 'v\d+'

  pull_request:
    branches: [master]

jobs:
  build:
    name: unit-test-cra
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Run build
        run: npm run build --if-present

      - name: Run unit tests
        run: npm run test

      - name: Run e2e tests
        run: npm run e2e

  release:
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Get release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Check out code
        uses: actions/checkout@v3

      - name: Create release branch
        run: |
          git checkout -b release/${GITHUB_REF#refs/*/}
          git push origin release/${GITHUB_REF#refs/*/}

      - name: Create Release Issue
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { execSync } = require('child_process');
            const issueTitle = `Release ${process.env.GITHUB_REF_NAME}`;

            const currentTag = execSync('git describe --abbrev=0 --tags').toString().trim();
            const previousTag = execSync('git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1)').toString().trim();
            const tagRange = `${currentTag}...${previousTag}`
            const command = `git log --pretty=format:"- %s" ${tagRange}`
            const changeLog = execSync(command).toString()
            const issueBody = `
              **Author**: ${process.env.GITHUB_ACTOR}
              **Date**: ${new Date().toISOString()}
              **Version**: ${process.env.RELEASE_VERSION}
              
              Changelog:
              ${changeLog};
            `;
            
            const { data: newIssue } = await github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody
            });

            const labelToAdd = 'RELEASE';
            await github.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: newIssue.number,
              labels: [labelToAdd]
            });

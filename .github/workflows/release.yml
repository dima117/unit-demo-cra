name: Release Process

on: [push]
  # push:
  #   tags:
  #     - 'v\d+'

jobs:
  release:
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [18.x]
    runs-on: ${{ matrix.os }}
    permissions: write-all

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - run: git fetch --prune --unshallow

      - name: Get current release tag
        id: get_curent_version
        run: echo "current_tag=$(git describe --abbrev=0 --tags --match='v[0-9]*' HEAD)" >> "$GITHUB_OUTPUT"

      - name: Get previous release tag
        id: get_previous_release
        if: steps.get_curent_version.outputs.current_tag != ''
        run: echo "previous_tag=$(git describe --abbrev=0 --tags --match='v[0-9]*' $(git describe --abbrev=0 --tags --match='v[0-9]*' HEAD)^)" >> "$GITHUB_OUTPUT"

      - name: Generate changelog
        id: generate_changelog
        if: steps.get_previous_release.outputs.previous_tag != ''
        run: |
          echo -e "Author:  $(git show -s --pretty='%an' ${{steps.get_curent_version.outputs.current_tag}})\n" > changelog.txt
          echo -e "Date:  $(git show -s --pretty='%cD' ${{steps.get_curent_version.outputs.current_tag}})\n\n" >> changelog.txt
          echo -e "Changelog: \n" >> changelog.txt 
          git log --pretty=format:'- %s [%h](https://github.com/${{github.repository}}/commit/%H)' --abbrev-commit ${{steps.get_previous_release.outputs.previous_tag}}...${{steps.get_curent_version.outputs.current_tag}} >> changelog.txt;
          
      - name: Read changelog.txt
        id: changelog
        uses: juliangruber/read-file-action@v1
        with:
          path: changelog.txt
        
      - name: Get all release issues
        id: get_issue
        uses: lee-dohm/select-matching-issues@v1
        with:
          format: raw
          query: 'label:RELEASE'
          token: ${{ github.token }}

      - name: Get latest issue number
        id: issues_number
        run: echo "issue_number=$(echo $(head -n 1 ${{ steps.get_issue.outputs.path }}) | grep -Eo '[0-9]+$')" >> "$GITHUB_OUTPUT"
      
      - if: steps.issues_number.outputs.issue_number == ''
        name: Create issue
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-issue'
          title: Release ${{ steps.get_curent_version.outputs.current_tag }}
          body: ${{ steps.changelog.outputs.content }}
          labels: 'RELEASE'
          
      - if: steps.issues_number.outputs.issue_number != ''
        name: Update issue
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'update-issue'
          title: Release ${{ steps.get_curent_version.outputs.current_tag }}
          body: ${{ steps.changelog.outputs.content }}
          labels: 'RELEASE'
          issue-number: ${{ steps.issues_number.outputs.issue_number }}
          
  testing:
    permissions: write-all
    uses: ./.github/workflows/test.yml
    
  deploy:
    needs: testing
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [18.x]
    runs-on: ${{ matrix.os }}
    permissions: write-all
    
    steps:
    - name: Deploy to gh-pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build
        publish_branch: release-${{steps.get_curent_version.outputs.current_tag}}
#         secrets: inherit
          
#       - uses: actions/setup-node@v3
#         name: Setup node
#         with:
#           node-version: ${{ matrix.node }}

#       - name: Cache necessary modules
#         id: cache-npm-modules
#         uses: actions/cache@v3
#         with:
#           path: node_modules
#           key: ${{ runner.os }}-npm-modules

#       - name: "Install necessary modules"
#         run: npm install

#       - name: "Build project"
#         run: npm run build

#       - name: Cache playwright
#         id: cache-playwright
#         uses: actions/cache@v3
#         with:
#           path: |
#             ~/.cache/ms-playwright
#           key: ${{ runner.os }}-playwright

#       - name: "Install playwright"
#         if: steps.cache-playwright.outputs.cache-hit != 'true'
#         run: npx playwright install --with-deps

#       - name: "Tests"
#         run: npm run test:ci

#       - name: "Run Playwright tests"
#         run: npm run test:all:ci



#       - name: Update release issue with deployment details
#         uses: actions/github-script@v4
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const issueNumber = "${{ steps.create_release_issue.outputs.issue-number }}";
#             const deployUrl = "https://${{ github.repository_owner }}.github.io/${{ github.repository }}";
#             await github.rest.issues.update({
#               owner: github.context.repo.owner,
#               repo: github.context.repo.repo,
#               issue_number: issueNumber,
#               body: `Deployment URL: ${deployUrl}`
#             })

#       - name: Close release issue
#         uses: peter-evans/close-issue@v1
#         with:
#           issue-number: ${{ steps.create_release_issue.outputs.issue-number }}

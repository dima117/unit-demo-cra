name: Release Process

on:
  push:
    tags:
      - 'v[0-9]+'

jobs:
  release:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: git fetch --prune --unshallow

      # Prepare release info

      - name: Release info
        id: release_info
        run: |
          echo "### Release Information"
          echo "### Release Information" > release_issue.md
          
          TAG_NAME=$(basename "${{ github.ref }}")
          echo "Tag: $TAG_NAME"

          RELEASE_VERSION=$(echo "$TAG_NAME" | sed 's/v//')
          echo "- Version: $RELEASE_VERSION"
          echo "- Version: $RELEASE_VERSION" >> release_issue.md
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          
          TAG_AUTHOR=$(git log -1 --pretty=format:%an $TAG_NAME)
          echo "- Author: $TAG_AUTHOR"
          echo "- Author: $TAG_AUTHOR" >> release_issue.md

          TAG_DATE=$(git log -1 --pretty=format:%ci $TAG_NAME)
          echo "- Date: $TAG_DATE"
          echo "- Date: $TAG_DATE" >> release_issue.md
          
          RELEASE_BEFORE=$((RELEASE_VERSION-1))
          LAST_TAG="v$RELEASE_BEFORE"
          echo "- Last release tag: $RELEASE_BEFORE"
          echo "#### Changelog"
          echo "#### Changelog" >> release_issue.md
          TEXT_CHANGELOG=$(git log --no-color --pretty=format:"- %s (%h)%n" $LAST_TAG..HEAD)
          echo "$TEXT_CHANGELOG" >> release_issue.md

          echo "- CI Build & Tests Results: [Link](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> release_issue.md

      # Test & build
      
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run autotests
        run: npm run test-ci      

      - name: Build project
        run: npm run build

      - name: Deploy for gh-pages
        run: |
          git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          npx gh-pages -d build -u "github-actions-bot <support+actions@github.com>"  
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        if: success()

      # Generate Release issue

      - name: Get issue number
        id: get_issue_number
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'release_${{ env.RELEASE_VERSION }}',
              per_page: 1
            });
            if (data) {
              const issueNumber = data[0]?.number;
              console.log("Found issue: " + issueNumber);
              core.setOutput('issue_number', issueNumber);
            }

      - name: Create release issue
        id: create_issue
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: Release ${{ env.RELEASE_VERSION }}
          issue-number: ${{ steps.get_issue_number.outputs.issue_number }}
          content-filepath: release_issue.md
          labels: release_${{ env.RELEASE_VERSION }}

      - name: Close issue
        id: close_issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'release_${{ env.RELEASE_VERSION }}',
              per_page: 1
            });
            if (data) {
              const issueNumber = data[0]?.number;
              console.log("Closing issue: " + issueNumber);
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: 'closed'
              });
            }
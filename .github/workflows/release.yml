name: Release Process

on:
  push:
  #  tags:
  #    - 'v[0-9]+'

jobs:
  release:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
      - run: git fetch --prune --unshallow

      # Prepare release info

      - name: Release info
        id: release_info
        run: |
          echo "### Release Information" > release_issue.md
          
          RELEASE_VERSION=$(echo "${{ github.ref }}" | sed 's/v//')
          echo "- Version: $RELEASE_VERSION" >> release_issue.md
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          
          current_date=$(date +"%Y-%m-%d")
          echo "- Date: $current_date" >> release_issue.md
          
          echo "#### Changelog" >> release_issue.md
          LAST_TAG=$(git describe --abbrev=0 --tags --match 'v[0-9]*')
          TEXT_CHANGELOG=$(git log --no-color --pretty=format:"- %s (%h)%n" $LAST_TAG..HEAD)
          echo "$TEXT_CHANGELOG" >> release_issue.md

          echo "- CI Results: [Link](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> release_issue.md

      # Test & build
      
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run autotests
        run: npm run test-ci      

      - name: Build project
        run: npm run build

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
        if: success()

      
      #- name: Add gh-pages deployment info to release issue
      #  run: |
      #    DEPLOYMENT_URL="https://${{ github.repository_owner }}.github.io/${{ github.repository }}"
      #    echo "Deployment URL: $DEPLOYMENT_URL" >> release_issue.md
      #    gh issue comment ${{ steps.create_issue.outputs.issue_number }} --body "$(cat release_issue.md)"

      # Create release

      # - name: Archive build
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: build
      #    path: build
      #    if-no-files-found: error

      #- name: Create Release
      #  id: create_release
      #  uses: actions/create-release@v1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    tag_name: ${{ github.ref }}
      #    release_name: Release ${{ steps.release_info.outputs.version }}
      #    body: ${{ steps.get_changelog.outputs.changelog }}
      #    draft: false
      #    prerelease: false

      #- name: Attach build to Release
      #  uses: actions/upload-release-asset@v1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    upload_url: ${{ steps.create_release.outputs.upload_url }}
      #    asset_path: ./build
      #    asset_name: build.zip
      #    asset_content_type: application/zip

      # Generate Release issue

      - name: Create release issue
        id: create_issue
        run:
          issue_response=$(gh issue create --title "${{ env.RELEASE_VERSION }}" --body "$(cat release_issue.md)" --json)
          issue_number=$(echo "$issue_response" | jq -r '.number')
          echo $issue_number
          gh issue close --comment "Auto-closing issue" $issue_number
        if: always()

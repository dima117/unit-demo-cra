name: üßæ release

on: # –ø–æ–º–µ–Ω—è—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –ø–æ—Å–ª–µ –æ—Ç–ª–∞–¥–∫–∏
  push:
    tags:
      - "v[0-9]+"
permissions:
  contents: read
  issues: write
env:
  RELEASE_COMMIT:
  branchExists:

jobs:
  changelog:
    name: üèÇ –ù–∞—á–∞—Ç —Ä–µ–ª–∏–∑
    runs-on: ubuntu-latest

    permissions:
      contents: write
      actions: write
      checks: write
      issues: write
      packages: write
    outputs:
      output1: ${{steps.release-tag.outputs.RELEASE_VERSION}}
      output2: ${{steps.release-tag.outputs.BRANCH_RELEASE}}
      output3: ${{steps.prev-tag.outputs.PREV_TAG}}
      output4: ${{steps.collect-commits.outputs.COMMIT_LIST}}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: üè∑Ô∏è –ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Ç–µ–≥–∞
        id: release-tag
        run: |
          echo "RELEASE_VERSION=$(git describe --tags --match "v[0-9]*" --abbrev=0)" >> $GITHUB_OUTPUT
          echo "BRANCH_RELEASE=release-$(git describe --tags --match "v[0-9]*" --abbrev=0)" >> $GITHUB_OUTPUT
      - name: üîç –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–ª–∏–∑–Ω—ã–π —Ç–µ–≥
        id: prev-tag
        run: |
          BRANCH=$(git branch --show-current)
          git checkout ${{ steps.release-tag.outputs.RELEASE_VERSION }}
          echo "PREV_TAG=$(git describe --match "v[0-9]*" --abbrev=0 --tags HEAD~1)" >> $GITHUB_OUTPUT
          git checkout $BRANCH
      - name: ‚öíÔ∏è –ö–æ–º–º–∏—Ç—ã –º–µ–∂–¥—É —Ä–µ–ª–∏–∑–∞–º–∏
        id: collect-commits
        run: |
          echo "COMMIT_LIST<<EOF" >> $GITHUB_OUTPUT
          COMMIT_LIST=$(git log --pretty=format:"%s" ${{ steps.release-tag.outputs.RELEASE_VERSION }} ^${{ steps.prev-tag.outputs.PREV_TAG }})
          echo "$COMMIT_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–µ—Ç–∫–∏
        id: check_branch
        run: |
          echo "${{steps.release-tag.outputs.BRANCH_RELEASE}}"
          if git show-ref --quiet --heads ${{steps.release-tag.outputs.BRANCH_RELEASE}}; then
          echo "branchExists=true" >> $GITHUB_ENV
          else
            echo "branchExists=false" >> $GITHUB_ENV
          fi
          echo ${{ env.branchExists }}
      - name: ü™ì –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ—Ç–∫–∏
        run: |
        if: env.branchExists == true
          git branch -D ${{steps.release-tag.outputs.BRANCH_RELEASE}}
          git push origin --delete ${{steps.release-tag.outputs.BRANCH_RELEASE}}
      - name: üåø –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ç–∫–∏
        run: |
          git checkout ${{ env.RELEASE_COMMIT }}
          git checkout -b ${{steps.release-tag.outputs.BRANCH_RELEASE}} ${{ env.RELEASE_COMMIT }}
          git push origin ${{steps.release-tag.outputs.BRANCH_RELEASE}}
  call-tests:
    needs: changelog
    uses: ./.github/workflows/commit.yml
  write-issue:
    name: üßæ –í—ã–ø—É—Å–∫–∞–µ–º issue
    needs: [call-tests, changelog]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SENDER: ${{ github.actor }}
          TAG_DATE: ${{ github.event.head_commit.timestamp }}
          COMMITS: ${{ needs.changelog.outputs.output4 }}
          TEST_UNIT: ${{needs.call-tests.outputs.unit-result}}
          TEST_E2E: ${{needs.call-tests.outputs.e2e-result}}
          LINK: ${{needs.call-tests.outputs.artifact-link}}
          RELEASE_VERSION: ${{needs.changelog.outputs.output1}}
        with:
          update_existing: true

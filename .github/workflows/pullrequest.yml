name: PR

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  commit-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install deps
        run: npm ci
    
      - name: Commitlint check
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  code-lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Code-lint check
        run: npm run test

  e2e-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install deps
        run: npm ci 

      - name: Install playwright
        run: npx playwright install --with-deps

      - name: Run e2e tests
        run: npm run e2e-ci  
        
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Install dep
        run: npm ci
  
      - name: Run test
        run: npm run test-ci

  merge-blocking:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install deps
        run: npm ci

      - name: Eslint 
        run: npm run test

      - name: Check CI status
        id: check_status
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: checks } = await github.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha
            });
  
            const failingChecks = checks.check_runs.filter((check) => check.conclusion === 'failure');
  
            if (failingChecks.length > 0) {
              console.log('There are failing checks. Blocking merge.');
  
              core.setFailed('There are failing checks. Blocking merge.');
            } else {
              console.log('All checks passed. Allowing merge.');
            }

      - name: Set merge status
        if: ${{ failure() }}
        run: echo "Merge blocked due to failing checks." && exit 1